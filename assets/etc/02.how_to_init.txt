블로그를 개설할 수 있는 여러 방법 중, .zip 파일을 다운로드 받아서 개설하는 방법을 선택했습니다.
포크로 진행하는 방법도 굉장히 유용하지만, 한 계정 당 같은 Repository는 두 개 이상의 포크가 불가능 합니다.

>---------------------------------------------------------------------------
※ fork로 진행하는 법은 초기 설정만 다릅니다.
우선 fork를 받았다면 자동으로 본인 계정의 Repository로 소스를 따옵니다.
그 후, Repository의 명을 본인 아이디.github.io 로 변경만 해주면 .zip 파일을 Github와 연동한 것과 동일한 상태가 됩니다.

편하신 방법으로 선택하시고 진행하시면 됩니다.
-----------------------------------------------------------------------------

우선 우리는 .zip파일로 진행을 하니, .git 폴더를 만들어 주는 작업, 즉, Git과 연동이 필요합니다.
이 폴더는 Git 과 연동하기 위한 정보를 가진 폴더로써 유저가 직접적으로 건드릴 일은 거의 없습니다.
혹시라도 지우거나 수정 시, 새로 연결을 잡아야 할 것입니다.

우선 Github에 새로운 Repository를 생성해줍시다.
---
본인아이디.github.io
---
형태로 Repository 명을 생성해줍니다.

그리고 블로그의 소스를 관리할 폴더를 하나 만들어서 Git bash를 실행합니다.
우선 global 옵션으로 본인의 Github 아이디와 이메일을 등록합니다.
git config --global user.name 유저 아이디
git config --global user.email 유저 이메일
※ global로 지정하지 않으면 추후 Git 작업을 할 때마다 등록을 해야할 수 있습니다.


그 후, 아까 새로 생성한 Repository의 url을 이용해서 아까 만든 빈 폴더에 git clone을 해줍니다.
git clone https://github.com/4862abd/4862abd.github.io.git
정상적으로 clone이 되었다면 exit 명령어를 통해 bash를 종료합니다.

이제 clone으로 만들어진 본인 아이디.github.io 의 이름을 가진 폴더에 들어가면 빈 폴더라고 나옵니다.
하지만 숨겨진 파일을 확인하면 
.git
이라는 폴더가 하나 들어있죠.

이제 아까 받은 .zip 파일의 압축을 풀어줍니다.
그 후, 방금 연동된 .git 폴더가 있는 폴더에 압축 해제로 나온 파일들을 복붙 해줍니다.
그러면 .git이라는 폴더가 같이 있는 블로그 소스의 폴더가 완성됩니다.

이제 이 파일을 Git에 commit & push 할 차례입니다.
git bash를 다시 실행합니다.
bash에
git add .
를 입력합니다.
우리는 이미 Git 의 연동에 대한 정보를 가지고 있으므로 바로 commit & push를 진행할 것입니다.

git add .를 통해 파일과 폴더들이 commit이 될 준비를 마쳤습니다.
git status
를 입력해서 파일들이 초록색으로 변했다면 정상적으로 대기 상태에 올랐다는 것입니다.

이제 commit을 해봅시다.
git commit -m "커밋 메세지"
저 같은 경우는 처음 블로그의 소스를 commit 하는 것이니 [SYSTEM] INIT
이라는 메세지를 남겼습니다.

그 후,
git push origin main
을 입력해서 main 브랜치로 모든 파일을 push 해줍니다.

이제 Github의 해당 Repository로 들어가면 코드가 추가된 것을 확인할 수 있습니다.

--- 여기까지가 단순히 chirpy 테마를 Git에 올리는 과정이고, 이제 배포를 위한 단계를 거쳐야 합니다.
// 작성자 같은 경우는 소스를 편하게 관리하기 위해 VSCode를 이용하겠습니다.

우선 .github 폴더 - workflows 폴더 안의
commitlint.yml
page-deploy.yml.hook
두 파일을 남기고 .github 내의 모든 폴더, 파일을 지웁니다.
그리고 page-deploy.yml.hook 이라는 파일의 명에서 .hook 부분을 지워서
page-deploy.yml
로 만듭니다.

현재 .github - workflows - commitlint.yml, pages-deplay.yml 만 남아있는 상태입니다.

> 그 후, 초기화를 위해 몇 파일을 지워야한다고 합니다.
하지만 작성자의 경우 테스트를 위해 지우지 않고 진행했습니다.
또한 작성자가 진행한 버전의 chirpy 테마에서는 하단의 파일 중 
.travis.yml
docs 폴더
가 없었습니다.
있는 분들만 진행하시길 바랍니다.

※ 정석적으로 지울 파일들
.travis.yml
_posts 폴더 하위의 파일들
docs 폴더

---

그리고 _config.yml 파일을 열어서 url 란에
https://본인 아이디.github.io
를 입력해 줍시다.
ㄴ 이 URL은 추후 Git 에서 자동 배포 되었을 때 접속할 수 있는 URL 주소 입니다.

우선 초기화 작업이 마무리 되었다면 bundle 을 install 해야합니다.
콘솔을 실행하고 cd 명령어를 통해 해당 폴더(blog 소스가 담긴 폴더, 아이디.github.io) 로 진입합니다.
VSCode를 사용하는 경우라면 ctrl + shift + ` 로 바로 블로스 소스가 있는 폴더 위치에서 콘솔을 킬수 있습니다.

bundle install
을 입력합니다.

여러 파일이 생성되는 것을 확인할 수 있습니다.
ex)
_site 폴더
Gemfile.lock 등

* 사진
이렇게 여러 데이터가 installed 되었다고 메세지가 남습니다.

이제 로컬 환경에서 실행 해봅니다.
콘솔에
jekyll -serve
를 입력해주면,

* 사진
이러한 메세지가 뜨면 성공입니다.
확인해보면 http://127.0.0.1:4000 으로 접속이 가능하다고 하고, ctrl + c 를 통해서 멈출 수 있다고 하네요.
다들 아시겠지만 127.0.0.1 은 localhost 로 대체가 가능합니다.

접속해봅시다.

* 사진
자, 이제 로컬 환경에서 블로그를 관리하기 위한 준비를 마쳤습니다!

---
그러면 이제 배포를 위한 단계입니다.
아까 지워두었던 파일들을 Git 에 commit & push 진행합니다.
작성자는 미리 VSCode에 유저 정보를 등록해서 편하게 할 수 있었습니다.
VSCode를 사용하지 않는 분들은 아까 사용한 git add . 등의 명령어를 통해 동일하게 진행하시면 됩니다.

--- bash로 하는 법
블로스 소스가 있는 폴더에서

git add .
후

git status
로 확인하면
* 사진
처럼 초록색으로 제가 지우거나 이름이 바뀐 파일을 보여줍니다.
이제

git commit -m "커밋 메세지"
를 통해서 메세지를 남기면서 commit을 진행하고

git push origin main
를 통해서 main 브랜치로 push를 진행하면,

* 사진
이렇게 마무리 됩니다.

exit 명령어로 bash를 종료해줍니다.

-----------------------------------------
※ 하지만 여기서부터 작성자의 고난은 시작되었으니....
이후에 계속.. [배포 실패 해결 과정]