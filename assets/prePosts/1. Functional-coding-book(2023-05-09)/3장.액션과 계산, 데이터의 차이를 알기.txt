3장.액션과 계산, 데이터의 차이를 알기

자, 이쯤되면 지긋지긋 하죠?
외워버릴 수 밖에 없겠죠?

액션: 실행 시점과 횟수에 의존한다.
다른 말로 부수 효과(Side-effects), 부수 효과가 있는 함수(Side-effecting function), 순수하지 않은 함수(Impure function) 라고 부르기도 한다.

계산: 입력으로 출력을 계산한다.
다른 말로 순수 함수(Pure function), 수학 함수(Mathematical function) 라고 부르기도 한다.
참조 투명하다.

데이터: 이벤트에 의한 사실


모든 개발 과정에서 액션과 계산, 데이터를 구분하는 기술을 적용하는 것이 좋다고 한다.
예시를 들어보자.

1. 문제에 대해 생각할 때
아직 코딩을 시작하기 전이고 문제에 대해서 고민하고 있을 때도 문제를 액션과 계산, 데이터로 구분할 수 있다.
특히 주의해야할 부분(액션), 데이터, 결정을 내릴 부분(계산) 을 명확하게 알수 있다고 한다.

2. 코딩할 때
드디어 핵심으로 보이는 말이 하나 나왔다.
액션에서 빠르게 계산을 분리해낼 줄 알아야하며, 계산에서는 데이터를 분리해낼 줄 알아야한다.
이는 이전에 봤던 책 중에 "토비의 스프링 3.1" 에도 나온 맥락이다.
크게 따지면 관심사 분리, 조금 더 말하자면 메소드 추출 과도 비슷한 의미로 설명할 것으로 보인다.

3. 코드를 읽을 때
액션과 계산, 데이터를 구분지어 확인할 줄 알아야 하며, 코드를 읽을 때에도 액션을 계산으로, 계산을 데이터로 분리하는
방법을 강구하여 리팩토링하는 방법을 강구해야 할 것이다.


※ 리팩토링?
결과의 변경이 없이 결과를 내기 위한 코드의 구조를 새로 정립하거나 수정하는 작업을 뜻한다.
여러 이유로 리팩토링을 진행하지만, 보통 공부를 했던 책들에서는, "역할과 책임이 뒤섞인 코드에서 각각의 관심사를 분리해낸다." 를
목표로 진행하는 경향이 있더라.
물론 그런 책만 내가 본 것일 수 있다.
실제로 리팩토링은 업무 중에도 자주 진행했다.
코드의 가독성을 위해서 진행하는 경우가 가장 많았고, 코드의 성능을 위해 진행하는 경우도 있었다.
가장 기억에 남는 리팩토링은 MyBatis와 xml을 활용해서 결과를 조회하던 로직을 순수 Java코드를 활용한 JPA로 바꾸면서
같은 결과를 도출하게 하는 작업이었다.
nativeQuery? 사용하지 않았다.
GROUP BY 같이 JPA가 지원하지 않는 기능은 Java의 stream을 활용하는 등, Java로 같은 결과를 낼 수 있게 진행하곤 했다.
물론 산출되는 데이터 자체는 다르겠지만, 그 데이터를 이용해 화면을 송출하는 작업에서는 같은 결과를 내게 하였다.


---

※※ 액션과 계산, 데이터는 어디에나 적용할 수 있습니다.
우리가 일상에서 자주 하는 장보기로 예시를 들었다.
냉장고 확인하기 -> 운전해서 상점으로 가기 -> 필요한 것 구입하기 -> 운전해서 집으로 오기
의 과정을 거친다고 하면, 이 모든 단계는 각각의 액션이다.
